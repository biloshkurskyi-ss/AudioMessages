//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Sergey Biloshkurskyi on 3/1/17.
//  Copyright Â© 2017 Sergey Biloshkurskyi. All rights reserved.
//

import UIKit
import Messages
import AlamofireImage
import Alamofire
import AVFoundation

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet var imageViewTest: UIImageView!
    var player: AVAudioPlayer? = nil
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        if let messageURL = conversation.selectedMessage?.url {
            if let audioUrl = decodeURL(messageURL) {
                downloadAndPlay(audioUrl)
            }
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        
        print("didReceive \(message)")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        print("didSelect = \(message)")
    }
    
    
    @IBAction func sendAttachedImage(_ sender: UIButton) {

        let stringUrl = NSTemporaryDirectory() + "image-0.jpeg"
        let imageUrl = URL(fileURLWithPath: stringUrl)
        
        let image = UIImage(named: "image-0.jpeg")
        
        let dataImage = UIImageJPEGRepresentation(image!, 0.0)
        
        do {
            try dataImage?.write(to: imageUrl, options: .atomic)
        } catch {
            print("Error: \(error)")
        }
        
        //sending message
        let conversation = self.activeConversation
        
        conversation?.insertAttachment(imageUrl, withAlternateFilename: nil, completionHandler: { (error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
    }
    
    @IBAction func sendImageInMessage(_ sender: UIButton) {
        //create messga
        let messge = MSMessage()
        let layout = MSMessageTemplateLayout()
        
        layout.caption = "caption text"
        
        layout.image = UIImage(named: "image-0.jpeg")
        layout.imageTitle = "Image title"
    
        messge.layout = layout
        
        let conversation = self.activeConversation
        
        conversation?.insert(messge, completionHandler: { (error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
    }
    
    @IBAction func sendAudioInMessage(_ sender: UIButton) {
        //create messga
        let messge = MSMessage()
        let layout = MSMessageTemplateLayout()
        
        layout.caption = "sendAudioInMessage caption text"
        
        if let bundleFromPath = Bundle.main.path(forResource: "wrong", ofType: "m4a", inDirectory: nil) {
            layout.mediaFileURL = URL(fileURLWithPath: bundleFromPath)
        }
        
        messge.layout = layout
        
        let conversation = self.activeConversation
        
        conversation?.insert(messge, completionHandler: { (error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
    }
    
    @IBAction func sendAudioV2(_ sender: UIButton) {
        let bundleFromPath = Bundle.main.path(forResource: "wrong", ofType: "m4a", inDirectory: nil)
        let insertedUrl = URL(fileURLWithPath: bundleFromPath!)
        
        //sending message
        let conversation = self.activeConversation
        
        conversation?.insertAttachment(insertedUrl, withAlternateFilename: nil, completionHandler: { (error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
    }
    
    @IBAction func sendVideo(_ sender: UIButton) {
        //create messga
        let messge = MSMessage()
        let layout = MSMessageTemplateLayout()
        
        layout.caption = "Video caption text"
        
        if let bundleFromPath = Bundle.main.path(forResource: "Best_of_5", ofType: "mp4", inDirectory: nil) {
            layout.mediaFileURL = URL(fileURLWithPath: bundleFromPath)
        }
        
        messge.layout = layout
        
        let conversation = self.activeConversation
        
        conversation?.insert(messge, completionHandler: { (error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
    }
    
    @IBAction func sendImageWithAudio(_ sender: UIButton) {
        //create messga
        let messge = MSMessage()
        let layout = MSMessageTemplateLayout()
        
        Alamofire.request("http://kolobuga.ru/wp-content/uploads/2016/11/url.png").responseImage { (response) in
            debugPrint(response)
 
            debugPrint(response.result)
            
            if let image = response.result.value {
                
                self.imageViewTest.image = image
                print("image downloaded: \(image)")
                
                layout.caption = "Downloaded image caption"
                layout.image = image
                
                
                messge.url = self.prepareURL()
                
                messge.layout = layout
                
                let conversation = self.activeConversation
                
                conversation?.insert(messge, completionHandler: { (error) in
                    if let error = error {
                        print(error)
                    }
                })
                
                self.dismiss()
            }
        }
    }
    
    func prepareURL() -> URL {
        var urlComponents = URLComponents()
        urlComponents.scheme = "https";
        urlComponents.host = "www.doowapp.com";
        let playerQuery = URLQueryItem(name: "audioFile",
                                       value: "http://freetone.org/ring/stan/iPhone_5-Alarm.mp3")
        
        urlComponents.queryItems = [playerQuery]
        
        return urlComponents.url!
    }
    
    func decodeURL(_ url: URL) -> String? {
        let components = URLComponents(url: url,
                                       resolvingAgainstBaseURL: false)
        
        for (_, queryItem) in (components?.queryItems?.enumerated())! {
            if queryItem.name == "audioFile" {
                let fileUrl = queryItem.value
                print("fileUrl = \(fileUrl)")
                return fileUrl
            }
        }
        
        return nil
    }
    
    func playAudio(_ url: URL) {
        do {
            try player = AVAudioPlayer(contentsOf: url, fileTypeHint: nil)
        } catch {
            print("player Error: \(error)")
        }
        
        player?.play()
    }
    
    func downloadAndPlay(_ stringUrl: String) {
        if let audioUrl = URL(string: stringUrl) {
            
            // then lets create your document folder url
            let documentsDirectoryURL =  FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
            
            // lets create your destination file url
            let destinationUrl = documentsDirectoryURL.appendingPathComponent(audioUrl.lastPathComponent)
            print("destinationUrl = \(destinationUrl)")
            
            // to check if it exists before downloading it
            if FileManager.default.fileExists(atPath: destinationUrl.path) {
                print("The file already exists at path")
                self.playAudio(URL(fileURLWithPath: destinationUrl.path))
                // if the file doesn't exist
            } else {
                
                // you can use NSURLSession.sharedSession to download the data asynchronously
                URLSession.shared.downloadTask(with: audioUrl, completionHandler: { (location, response, error) -> Void in
                    guard let location = location, error == nil else { return }
                    do {
                        // after downloading your file you need to move it to your destination url
                        try FileManager.default.moveItem(at: location, to: destinationUrl)
                        print("File moved to documents folder")
                        
                        self.playAudio(URL(fileURLWithPath: destinationUrl.path))
                    } catch let error as NSError {
                        print(error.localizedDescription)
                    }
                }).resume()
            }
        }
    }

}
